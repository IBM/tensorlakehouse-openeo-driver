import json
from typing import Any, Dict, List, Optional

import urllib.parse
from openeo_geodn_driver.constants import STAC_URL, logger
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry


class STAC:
    def __init__(self, url: str) -> None:
        assert isinstance(url, str)
        if url.endswith("/"):
            url = url[:-1]
        self._url = url

    @property
    def headers(self):
        headers = {
            "Content-Type": "application/json",
        }
        return headers

    def _get(
        self, endpoint: str, params: Optional[Dict[str, Any]] = None
    ) -> requests.Response:
        """this method makes all GET requests to the Discovery

        Args:
            endpoint (str): path (aka route) of the endpoint

        Returns:
            Union[List, Dict]: _description_
        """

        url = f"{self._url}{endpoint}"
        retry_strategy = Retry(
            total=2,
            status_forcelist=[429, 500, 502, 503, 504],
            allowed_methods=["GET"],
        )
        adapter = HTTPAdapter(max_retries=retry_strategy)
        with requests.Session() as session:
            logger.debug(f"GET {url} params={params}")
            session.mount("https://", adapter)
            session.mount("http://", adapter)
            try:
                resp = session.get(
                    url=url,
                    headers=self.headers,
                    params=params,
                    timeout=60,
                    # verify=False,
                )
                assert resp.status_code in [
                    200,
                    201,
                ], f"Error! Invalid request - status_code={resp.status_code}\ntext={resp.text}\nurl={resp.url}\nheaders={self.headers}"

                return resp
            except requests.exceptions.RetryError as e:
                logger.error(e)
                raise e
            except AssertionError as e:
                logger.error(e)
                raise e

    def _post(
        self, endpoint: str, payload: Optional[Dict[str, Any]] = None
    ) -> requests.Response:
        """this method makes all GET requests to the Discovery

        Args:
            endpoint (str): path (aka route) of the endpoint

        Returns:
            Union[List, Dict]: _description_
        """

        url = f"{self._url}{endpoint}"
        retry_strategy = Retry(
            total=2,
            status_forcelist=[429, 500, 502, 503, 504],
            allowed_methods=["POST"],
        )
        adapter = HTTPAdapter(max_retries=retry_strategy)
        with requests.Session() as session:
            logger.debug(f"POST {url} payload={payload}")
            session.mount("https://", adapter)
            session.mount("http://", adapter)
            try:
                resp = session.post(
                    url=url,
                    headers=self.headers,
                    json=payload,
                    timeout=60,
                    verify=False,
                )
                assert resp.status_code in [
                    200,
                    201,
                ], f"Error! Invalid request - status_code={resp.status_code}\ntext={resp.text}\nurl={resp.url}\nheaders={self.headers}"

                return resp
            except requests.exceptions.RetryError as e:
                logger.error(e)
                raise e
            except AssertionError as e:
                logger.error(e)
                raise e

    def _put(
        self, endpoint: str, payload: Optional[Dict[str, Any]] = None
    ) -> requests.Response:
        """this method makes all GET requests to the Discovery

        Args:
            endpoint (str): path (aka route) of the endpoint

        Returns:
            Union[List, Dict]: _description_
        """

        url = f"{self._url}{endpoint}"
        retry_strategy = Retry(
            total=2,
            status_forcelist=[429, 500, 502, 503, 504],
            allowed_methods=["PUT"],
        )
        adapter = HTTPAdapter(max_retries=retry_strategy)
        with requests.Session() as session:
            logger.debug(f"PUT {url} payload={payload} headers={self.headers}")
            session.mount("https://", adapter)
            session.mount("http://", adapter)
            try:
                resp = session.put(
                    url=url,
                    headers=self.headers,
                    json=payload,
                    timeout=60,
                )
                resp.raise_for_status()

                return resp
            except requests.exceptions.RetryError as e:
                logger.error(e)
                raise e
            except AssertionError as e:
                logger.error(e)
                raise e

    def get_item(self, collection_id: str, item_id: str) -> Dict[str, Any]:
        """make a request to get STAC item specified by collection and item ids

        Args:
            collection_id (str): collection ID
            item_id (str): item id

        Returns:
            Dict: item as dict
        """
        path = f"/collections/{collection_id}/items/{item_id}"
        endpoint = urllib.parse.quote(path)
        resp = self._get(endpoint=endpoint)
        item = resp.json()
        return item

    def list_item(self, collection_id: str, limit: int = 10) -> Dict[str, Any]:
        """make a request to get STAC item specified by collection and item ids

        Args:
            collection_id (str): collection ID
            item_id (str): item id

        Returns:
            Dict: item as dict
        """
        path = f"/collections/{collection_id}/items/"
        endpoint = urllib.parse.quote(path)
        resp = self._get(endpoint=endpoint, params={"limit": limit})
        item = resp.json()
        return item

    def search(
        self, collections: List[str], bbox: List[str], datetime: str, limit: int = 10
    ) -> List[Dict]:
        payload = {
            "collections": collections,
            "bbox": bbox,
            "datetime": datetime,
            "limit": limit,
        }
        resp = self._post(endpoint="/search", payload=payload)
        items = resp.json()
        return items

    def get_summaries(self, collection: str):
        items = self.list_item(collection_id=collection)
        item = items.get("features")[0]
        cube_dims = item["properties"]["cube:dimensions"]
        cube_vars = item["properties"]["cube:variables"]
        band_values = list()
        if cube_vars is not None:
            for k, v in cube_vars.items():
                band_values.append(k)
        cube_dims.update({"bands": {"type": "bands", "values": band_values}})
        c = {"cube:dimensions": cube_dims}
        return json.dumps(c)

    def list_collections(self):
        resp = self._get(endpoint="/collections")
        return resp.json()
<<<<<<< HEAD
=======

    def is_collection_available(self, collection_id: str) -> bool:
        collections = self.list_collections()
        for c in collections["collections"]:
            if c["id"] == collection_id:
                return True
        return False
>>>>>>> main

    def get_collection(self, collection_id: str) -> Dict:
        resp = self._get(endpoint=f"/collections/{collection_id}")
        resp.raise_for_status()
        coll = resp.json()
        return coll

    def update_collection(self, new_collection):
        self._put(endpoint="/collections", payload=new_collection)


def main():
    stac = STAC(url=STAC_URL)
    collection = stac.get_collection(collection_id="HLSS30")
    print(collection)
    if "license" in collection.keys():
        print("valid collection")
    else:
        collection["license"] = "Unknown"
        stac.update_collection(new_collection=collection)


if __name__ == "__main__":
    main()
